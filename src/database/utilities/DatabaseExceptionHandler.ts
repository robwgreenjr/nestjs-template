import { BadRequestException, Injectable, InternalServerErrorException } from "@nestjs/common";
import { IDatabaseExceptionHandler } from "./IDatabaseExceptionHandler";

export const DATABASE_EXCEPTION_HANDLER = "DATABASE_EXCEPTION_HANDLER";

@Injectable()
export class DatabaseExceptionHandler implements IDatabaseExceptionHandler {
	exceptionHandler(exception: any): void {
		if (exception.name === "ValidationError") {
			throw new BadRequestException("Please provide the proper payload.");
		}

		if (exception.message.includes("unique")) {
			throw new BadRequestException("Provided value already exists, it needs to be unique.");
		}

		if (exception.message.includes("not-null") || exception.message.includes("non-null")) {
			throw new BadRequestException(exception.message);
		}

		if (exception.stack.includes("column") && exception.stack.includes("does not exist")) {
			throw new BadRequestException(
				"Error generated by providing unknown property, please make sure provided fields are valid."
			);
		}

		if (exception.stack.includes("foreign key constraint")) {
			throw new BadRequestException(
				`Foreign key '${exception.detail.split("(")[1].slice(0, -2)}' doesn't exist.`
			);
		}

		throw new InternalServerErrorException(exception.message);
	}
}
